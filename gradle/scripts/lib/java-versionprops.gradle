configure(projectsWithFlags('java', 'publish')) {
    def generatedResourcesDir = project.file("${project.projectDir}/gen-src/main/resources")
    sourceSets.main.resources.srcDir generatedResourcesDir
    clean {
        delete generatedResourcesDir
    }

    // Generate version.properties, similar to Netty.
    task versionProperties {
        def propsFile = project.file("${generatedResourcesDir}/META-INF/${project.group}.versions.properties")
        outputs.file propsFile

        def artifactId = project.ext.artifactId
        def props = new Properties()
        project.ext.repoStatus.each { k, v ->
            props["${artifactId}.${k}"] = v
        }

        outputs.upToDateWhen {
            if (propsFile.exists()) {
                def oldProps = new Properties()
                propsFile.withInputStream { oldProps.load(it) }
                if (oldProps == props) {
                    return true
                }
            } else {
                logger.info("${propsFile} does not exist.")
            }
            return false
        }

        doLast {
            project.mkdir(propsFile.parentFile)
            logger.info("Writing ${propsFile} ..")
            propsFile.withOutputStream { props.store(it, null) }
        }
    }

    // Ensure version.properties is available during the build.
    tasks.sourcesJar.dependsOn(tasks.versionProperties)
    tasks.processResources.dependsOn(tasks.versionProperties)
}
